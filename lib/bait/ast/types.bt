// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code Form is subject to the terms of the Mozilla Public License 2.0.
package ast

pub const PLACEHOLDER_TYPE := 0
pub const VOID_TYPE := 1
pub const I8_TYPE := 2
pub const I16_TYPE := 3
pub const I32_TYPE := 4
pub const I64_TYPE := 5
pub const U8_TYPE := 6
pub const U16_TYPE := 7
pub const U32_TYPE := 8
pub const U64_TYPE := 9
pub const F32_TYPE := 10
pub const F64_TYPE := 11
pub const BOOL_TYPE := 12
pub const STRING_TYPE := 13
pub const ARRAY_TYPE := 14
pub const MAP_TYPE := 15
pub const ANY_TYPE := 16

const BUILTIN_STRUCT_TYPES := [
	STRING_TYPE,
	ARRAY_TYPE,
	MAP_TYPE
]

pub enum TypeKind {
	placeholder
	string
	array
	map
	struct_
	enum_
	sum_type
	fun_
}

pub struct TypeSymbol{
	name string
	kind TypeKind
	info TypeInfo
	methods []FunDecl
	parent i32
	is_pub bool
	pkg string
}

pub fun (sym TypeSymbol) find_field(name string, t Table) StructField {
	if sym.info is StructInfo {
		info := sym.info as StructInfo
		for f in info.fields {
			if f.name == name {
				return f
			}
		}
	}
	if BUILTIN_STRUCT_TYPES.contains(sym.parent) {
		parent_sym := t.get_sym(sym.parent)
		return parent_sym.find_field(name, t)
	}
	return StructField{}
}

pub fun (sym TypeSymbol) has_method(name string) bool {
	for m in sym.methods {
		if m.name == name {
			return true
		}
	}
	return false
}

pub fun (t Table) register_builtins(){
	// IMPORTANT: Order of registration must match the order of the constants above
	t.register_sym(TypeSymbol{
		name: 'placeholder'
		kind: TypeKind.placeholder
	})
	t.register_sym(TypeSymbol{name: 'void'})
	t.register_sym(TypeSymbol{name: 'i8'})
	t.register_sym(TypeSymbol{name: 'i16'})
	t.register_sym(TypeSymbol{name: 'i32'})
	t.register_sym(TypeSymbol{name: 'i64'})
	t.register_sym(TypeSymbol{name: 'u8'})
	t.register_sym(TypeSymbol{name: 'u16'})
	t.register_sym(TypeSymbol{name: 'u32'})
	t.register_sym(TypeSymbol{name: 'u64'})
	t.register_sym(TypeSymbol{name: 'f32'})
	t.register_sym(TypeSymbol{name: 'f64'})
	t.register_sym(TypeSymbol{name: 'bool'})
	t.register_sym(TypeSymbol{
		name: 'string'
		kind: TypeKind.string
	})
	t.register_sym(TypeSymbol{
		name: 'array'
		kind: TypeKind.array
	})
	t.register_sym(TypeSymbol{
		name: 'map'
		kind: TypeKind.map
	})
	t.register_sym(TypeSymbol{name: 'any'})
}
